import * as react_jsx_runtime from 'react/jsx-runtime';
import { CSSProperties, MutableRefObject, Dispatch, SetStateAction, ReactNode, RefObject, DragEventHandler, MouseEvent } from 'react';
import * as _tanstack_react_table from '@tanstack/react-table';
import { Row, AccessorFn, DeepKeys, DeepValue, Table, TableState, ColumnDef, Column, Header, HeaderGroup, Cell, AggregationFn, SortingFn, FilterFn, TableOptions, OnChangeFn, RowPinningPosition, ColumnOrderState, GroupingState, Renderable } from '@tanstack/react-table';
export { ColumnFiltersState as MRT_ColumnFiltersState, ColumnOrderState as MRT_ColumnOrderState, ColumnPinningState as MRT_ColumnPinningState, ColumnSizingInfoState as MRT_ColumnSizingInfoState, ColumnSizingState as MRT_ColumnSizingState, ExpandedState as MRT_ExpandedState, GroupingState as MRT_GroupingState, PaginationState as MRT_PaginationState, RowSelectionState as MRT_RowSelectionState, SortingState as MRT_SortingState, Updater as MRT_Updater, VisibilityState as MRT_VisibilityState } from '@tanstack/react-table';
import { Virtualizer, VirtualizerOptions, VirtualItem, Range } from '@tanstack/react-virtual';
export { VirtualItem as MRT_VirtualItem, Virtualizer as MRT_Virtualizer, VirtualizerOptions as MRT_VirtualizerOptions } from '@tanstack/react-virtual';
import { AlertProps } from '@mui/material/Alert';
import { AutocompleteProps } from '@mui/material/Autocomplete';
import { BoxProps } from '@mui/material/Box';
import { ButtonProps } from '@mui/material/Button';
import { CheckboxProps } from '@mui/material/Checkbox';
import { ChipProps } from '@mui/material/Chip';
import { CircularProgressProps } from '@mui/material/CircularProgress';
import { DialogProps } from '@mui/material/Dialog';
import { IconButtonProps } from '@mui/material/IconButton';
import { LinearProgressProps } from '@mui/material/LinearProgress';
import { PaginationProps } from '@mui/material/Pagination';
import { PaperProps } from '@mui/material/Paper';
import { RadioProps } from '@mui/material/Radio';
import { SelectProps } from '@mui/material/Select';
import { SkeletonProps } from '@mui/material/Skeleton';
import { SliderProps } from '@mui/material/Slider';
import { TableProps } from '@mui/material/Table';
import { TableBodyProps } from '@mui/material/TableBody';
import { TableCellProps } from '@mui/material/TableCell';
import { TableContainerProps } from '@mui/material/TableContainer';
import { TableFooterProps } from '@mui/material/TableFooter';
import { TableHeadProps } from '@mui/material/TableHead';
import { TableRowProps } from '@mui/material/TableRow';
import { TextFieldProps } from '@mui/material/TextField';
import { Theme } from '@mui/material/styles';
import { DatePickerProps } from '@mui/x-date-pickers';
import * as _tanstack_match_sorter_utils from '@tanstack/match-sorter-utils';
import { RankingInfo } from '@tanstack/match-sorter-utils';
import { CollapseProps } from '@mui/material/Collapse';
import { DividerProps } from '@mui/material/Divider';
import { TableSortLabelProps } from '@mui/material/TableSortLabel';
import { MenuProps } from '@mui/material/Menu';
import { MenuItemProps } from '@mui/material/MenuItem';

declare const MRT_AggregationFns: {
    sum: _tanstack_react_table.AggregationFn<any>;
    min: _tanstack_react_table.AggregationFn<any>;
    max: _tanstack_react_table.AggregationFn<any>;
    extent: _tanstack_react_table.AggregationFn<any>;
    mean: _tanstack_react_table.AggregationFn<any>;
    median: _tanstack_react_table.AggregationFn<any>;
    unique: _tanstack_react_table.AggregationFn<any>;
    uniqueCount: _tanstack_react_table.AggregationFn<any>;
    count: _tanstack_react_table.AggregationFn<any>;
};

declare const MRT_FilterFns: {
    between: {
        <TData extends MRT_RowData>(row: Row<TData>, id: string, filterValues: [number | string, number | string]): boolean;
        autoRemove(val: any): boolean;
    };
    betweenInclusive: {
        <TData_1 extends MRT_RowData>(row: Row<TData_1>, id: string, filterValues: [number | string, number | string]): boolean;
        autoRemove(val: any): boolean;
    };
    contains: {
        <TData_2 extends MRT_RowData>(row: Row<TData_2>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    empty: {
        <TData_3 extends MRT_RowData>(row: Row<TData_3>, id: string, _filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    endsWith: {
        <TData_4 extends MRT_RowData>(row: Row<TData_4>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    equals: {
        <TData_5 extends MRT_RowData>(row: Row<TData_5>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    fuzzy: {
        <TData_6 extends MRT_RowData>(row: Row<TData_6>, columnId: string, filterValue: number | string, addMeta: (item: RankingInfo) => void): boolean;
        autoRemove(val: any): boolean;
    };
    greaterThan: {
        <TData_7 extends MRT_RowData>(row: Row<TData_7>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    greaterThanOrEqualTo: {
        <TData_8 extends MRT_RowData>(row: Row<TData_8>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    lessThan: {
        <TData_9 extends MRT_RowData>(row: Row<TData_9>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    lessThanOrEqualTo: {
        <TData_10 extends MRT_RowData>(row: Row<TData_10>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    notEmpty: {
        <TData_11 extends MRT_RowData>(row: Row<TData_11>, id: string, _filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    notEquals: {
        <TData_12 extends MRT_RowData>(row: Row<TData_12>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    startsWith: {
        <TData_13 extends MRT_RowData>(row: Row<TData_13>, id: string, filterValue: number | string): boolean;
        autoRemove(val: any): boolean;
    };
    includesString: _tanstack_react_table.FilterFn<any>;
    includesStringSensitive: _tanstack_react_table.FilterFn<any>;
    equalsString: _tanstack_react_table.FilterFn<any>;
    arrIncludes: _tanstack_react_table.FilterFn<any>;
    arrIncludesAll: _tanstack_react_table.FilterFn<any>;
    arrIncludesSome: _tanstack_react_table.FilterFn<any>;
    weakEquals: _tanstack_react_table.FilterFn<any>;
    inNumberRange: _tanstack_react_table.FilterFn<any>;
};

interface MRT_Icons {
    ArrowDownwardIcon: any;
    ArrowRightIcon: any;
    CancelIcon: any;
    ChevronLeftIcon: any;
    ChevronRightIcon: any;
    ClearAllIcon: any;
    CloseIcon: any;
    DensityLargeIcon: any;
    DensityMediumIcon: any;
    DensitySmallIcon: any;
    DragHandleIcon: any;
    DynamicFeedIcon: any;
    EditIcon: any;
    ExpandMoreIcon: any;
    FilterAltIcon: any;
    FilterListIcon: any;
    FilterListOffIcon: any;
    FirstPageIcon?: any;
    FullscreenExitIcon: any;
    FullscreenIcon: any;
    KeyboardDoubleArrowDownIcon: any;
    LastPageIcon?: any;
    MoreHorizIcon: any;
    MoreVertIcon: any;
    PushPinIcon: any;
    RestartAltIcon: any;
    SaveIcon: any;
    SearchIcon: any;
    SearchOffIcon: any;
    SortIcon: any;
    SyncAltIcon?: any;
    ViewColumnIcon: any;
    VisibilityOffIcon: any;
}

declare const MRT_SortingFns: {
    fuzzy: <TData extends MRT_RowData>(rowA: Row<TData>, rowB: Row<TData>, columnId: string) => number;
    alphanumeric: _tanstack_react_table.SortingFn<any>;
    alphanumericCaseSensitive: _tanstack_react_table.SortingFn<any>;
    text: _tanstack_react_table.SortingFn<any>;
    textCaseSensitive: _tanstack_react_table.SortingFn<any>;
    datetime: _tanstack_react_table.SortingFn<any>;
    basic: _tanstack_react_table.SortingFn<any>;
};
declare const rankGlobalFuzzy: <TData extends MRT_RowData>(rowA: MRT_Row<TData>, rowB: MRT_Row<TData>) => number;

type LiteralUnion<T extends U, U = string> = T | (U & Record<never, never>);
type Prettify<T> = {
    [K in keyof T]: T[K];
} & unknown;
type Xor<A, B> = Prettify<A & {
    [k in keyof B]?: never;
}> | Prettify<B & {
    [k in keyof A]?: never;
}>;
type MRT_DensityState = 'comfortable' | 'compact' | 'spacious';
type MRT_ColumnFilterFnsState = Record<string, MRT_FilterOption>;
type MRT_RowData = Record<string, any>;

type MRT_ColumnHelper<TData extends MRT_RowData> = {
    accessor: <TAccessor extends AccessorFn<TData> | DeepKeys<TData>, TValue extends TAccessor extends AccessorFn<TData, infer TReturn> ? TReturn : TAccessor extends DeepKeys<TData> ? DeepValue<TData, TAccessor> : never>(accessor: TAccessor, column: MRT_DisplayColumnDef<TData, TValue>) => MRT_ColumnDef<TData, TValue>;
    display: (column: MRT_DisplayColumnDef<TData>) => MRT_ColumnDef<TData>;
    group: (column: MRT_GroupColumnDef<TData>) => MRT_ColumnDef<TData>;
};
interface MRT_Localization {
    actions: string;
    and: string;
    cancel: string;
    changeFilterMode: string;
    changeSearchMode: string;
    clearFilter: string;
    clearSearch: string;
    clearSort: string;
    clickToCopy: string;
    collapse: string;
    collapseAll: string;
    columnActions: string;
    copiedToClipboard: string;
    dropToGroupBy: string;
    edit: string;
    expand: string;
    expandAll: string;
    filterArrIncludes: string;
    filterArrIncludesAll: string;
    filterArrIncludesSome: string;
    filterBetween: string;
    filterBetweenInclusive: string;
    filterByColumn: string;
    filterContains: string;
    filterEmpty: string;
    filterEndsWith: string;
    filterEquals: string;
    filterEqualsString: string;
    filterFuzzy: string;
    filterGreaterThan: string;
    filterGreaterThanOrEqualTo: string;
    filterInNumberRange: string;
    filterIncludesString: string;
    filterIncludesStringSensitive: string;
    filterLessThan: string;
    filterLessThanOrEqualTo: string;
    filterMode: string;
    filterNotEmpty: string;
    filterNotEquals: string;
    filterStartsWith: string;
    filterWeakEquals: string;
    filteringByColumn: string;
    goToFirstPage: string;
    goToLastPage: string;
    goToNextPage: string;
    goToPreviousPage: string;
    grab: string;
    groupByColumn: string;
    groupedBy: string;
    hideAll: string;
    hideColumn: string;
    max: string;
    min: string;
    move: string;
    noRecordsToDisplay: string;
    noResultsFound: string;
    of: string;
    or: string;
    pin: string;
    pinToLeft: string;
    pinToRight: string;
    resetColumnSize: string;
    resetOrder: string;
    rowActions: string;
    rowNumber: string;
    rowNumbers: string;
    rowsPerPage: string;
    save: string;
    search: string;
    select: string;
    selectedCountOfRowCountRowsSelected: string;
    showAll: string;
    showAllColumns: string;
    showHideColumns: string;
    showHideFilters: string;
    showHideSearch: string;
    sortByColumnAsc: string;
    sortByColumnDesc: string;
    sortedByColumnAsc: string;
    sortedByColumnDesc: string;
    thenBy: string;
    toggleDensity: string;
    toggleFullScreen: string;
    toggleSelectAll: string;
    toggleSelectRow: string;
    toggleVisibility: string;
    ungroupByColumn: string;
    unpin: string;
    unpinAll: string;
}
interface MRT_Theme {
    baseBackgroundColor?: CSSProperties['backgroundColor'];
    draggingBorderColor?: CSSProperties['borderColor'];
    matchHighlightColor?: CSSProperties['backgroundColor'];
    pinnedRowBackgroundColor?: CSSProperties['backgroundColor'];
    selectedRowBackgroundColor?: CSSProperties['backgroundColor'];
}
interface MRT_RowModel<TData extends MRT_RowData> {
    flatRows: MRT_Row<TData>[];
    rows: MRT_Row<TData>[];
    rowsById: {
        [key: string]: MRT_Row<TData>;
    };
}
type MRT_TableInstance<TData extends MRT_RowData> = Omit<Table<TData>, 'getAllColumns' | 'getAllFlatColumns' | 'getAllLeafColumns' | 'getBottomRows' | 'getCenterLeafColumns' | 'getCenterRows' | 'getColumn' | 'getExpandedRowModel' | 'getFlatHeaders' | 'getHeaderGroups' | 'getLeafHeaders' | 'getLeftLeafColumns' | 'getPaginationRowModel' | 'getPreFilteredRowModel' | 'getPrePaginationRowModel' | 'getRightLeafColumns' | 'getRowModel' | 'getSelectedRowModel' | 'getState' | 'getTopRows' | 'options'> & {
    getAllColumns: () => MRT_Column<TData>[];
    getAllFlatColumns: () => MRT_Column<TData>[];
    getAllLeafColumns: () => MRT_Column<TData>[];
    getBottomRows: () => MRT_Row<TData>[];
    getCenterLeafColumns: () => MRT_Column<TData>[];
    getCenterRows: () => MRT_Row<TData>[];
    getColumn: (columnId: string) => MRT_Column<TData>;
    getExpandedRowModel: () => MRT_RowModel<TData>;
    getFlatHeaders: () => MRT_Header<TData>[];
    getHeaderGroups: () => MRT_HeaderGroup<TData>[];
    getLeafHeaders: () => MRT_Header<TData>[];
    getLeftLeafColumns: () => MRT_Column<TData>[];
    getPaginationRowModel: () => MRT_RowModel<TData>;
    getPreFilteredRowModel: () => MRT_RowModel<TData>;
    getPrePaginationRowModel: () => MRT_RowModel<TData>;
    getRightLeafColumns: () => MRT_Column<TData>[];
    getRowModel: () => MRT_RowModel<TData>;
    getSelectedRowModel: () => MRT_RowModel<TData>;
    getState: () => MRT_TableState<TData>;
    getTopRows: () => MRT_Row<TData>[];
    options: MRT_DefinedTableOptions<TData>;
    refs: {
        bottomToolbarRef: MutableRefObject<HTMLDivElement>;
        editInputRefs: MutableRefObject<Record<string, HTMLInputElement>>;
        filterInputRefs: MutableRefObject<Record<string, HTMLInputElement>>;
        searchInputRef: MutableRefObject<HTMLInputElement>;
        tableContainerRef: MutableRefObject<HTMLDivElement>;
        tableFooterRef: MutableRefObject<HTMLTableSectionElement>;
        tableHeadCellRefs: MutableRefObject<Record<string, HTMLTableCellElement>>;
        tableHeadRef: MutableRefObject<HTMLTableSectionElement>;
        tablePaperRef: MutableRefObject<HTMLDivElement>;
        topToolbarRef: MutableRefObject<HTMLDivElement>;
    };
    setColumnFilterFns: Dispatch<SetStateAction<MRT_ColumnFilterFnsState>>;
    setCreatingRow: Dispatch<SetStateAction<MRT_Row<TData> | null | true>>;
    setDensity: Dispatch<SetStateAction<MRT_DensityState>>;
    setDraggingColumn: Dispatch<SetStateAction<MRT_Column<TData> | null>>;
    setDraggingRow: Dispatch<SetStateAction<MRT_Row<TData> | null>>;
    setEditingCell: Dispatch<SetStateAction<MRT_Cell<TData> | null>>;
    setEditingRow: Dispatch<SetStateAction<MRT_Row<TData> | null>>;
    setGlobalFilterFn: Dispatch<SetStateAction<MRT_FilterOption>>;
    setHoveredColumn: Dispatch<SetStateAction<Partial<MRT_Column<TData>> | null>>;
    setHoveredRow: Dispatch<SetStateAction<Partial<MRT_Row<TData>> | null>>;
    setIsFullScreen: Dispatch<SetStateAction<boolean>>;
    setShowAlertBanner: Dispatch<SetStateAction<boolean>>;
    setShowColumnFilters: Dispatch<SetStateAction<boolean>>;
    setShowGlobalFilter: Dispatch<SetStateAction<boolean>>;
    setShowToolbarDropZone: Dispatch<SetStateAction<boolean>>;
};
type MRT_DefinedTableOptions<TData extends MRT_RowData> = MRT_TableOptions<TData> & {
    icons: MRT_Icons;
    localization: MRT_Localization;
};
type MRT_TableState<TData extends MRT_RowData> = TableState & {
    columnFilterFns: MRT_ColumnFilterFnsState;
    creatingRow: MRT_Row<TData> | null;
    density: MRT_DensityState;
    draggingColumn: MRT_Column<TData> | null;
    draggingRow: MRT_Row<TData> | null;
    editingCell: MRT_Cell<TData> | null;
    editingRow: MRT_Row<TData> | null;
    globalFilterFn: MRT_FilterOption;
    hoveredColumn: Partial<MRT_Column<TData>> | null;
    hoveredRow: Partial<MRT_Row<TData>> | null;
    isFullScreen: boolean;
    isLoading: boolean;
    isSaving: boolean;
    showAlertBanner: boolean;
    showColumnFilters: boolean;
    showGlobalFilter: boolean;
    showLoadingOverlay: boolean;
    showProgressBars: boolean;
    showSkeletons: boolean;
    showToolbarDropZone: boolean;
};
type MRT_ColumnDef<TData extends MRT_RowData, TValue = unknown> = Omit<ColumnDef<TData, TValue>, 'accessorKey' | 'aggregatedCell' | 'aggregationFn' | 'cell' | 'columns' | 'filterFn' | 'footer' | 'header' | 'id' | 'sortingFn'> & {
    AggregatedCell?: (props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData, TValue>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    Cell?: (props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData, TValue>;
        renderedCellValue: ReactNode;
        row: MRT_Row<TData>;
        rowRef?: RefObject<HTMLTableRowElement>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    Edit?: (props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData, TValue>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    Filter?: (props: {
        column: MRT_Column<TData, TValue>;
        header: MRT_Header<TData>;
        rangeFilterIndex?: number;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    Footer?: ((props: {
        column: MRT_Column<TData, TValue>;
        footer: MRT_Header<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode) | ReactNode;
    GroupedCell?: (props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData, TValue>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    Header?: ((props: {
        column: MRT_Column<TData, TValue>;
        header: MRT_Header<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode) | ReactNode;
    PlaceholderCell?: (props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData, TValue>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    /**
     * Either an `accessorKey` or a combination of an `accessorFn` and `id` are required for a data column definition.
     * Specify a function here to point to the correct property in the data object.
     *
     * @example accessorFn: (row) => row.username
     */
    accessorFn?: (originalRow: TData) => TValue;
    /**
     * Either an `accessorKey` or a combination of an `accessorFn` and `id` are required for a data column definition.
     * Specify which key in the row this column should use to access the correct data.
     * Also supports Deep Key Dot Notation.
     *
     * @example accessorKey: 'username' //simple
     * @example accessorKey: 'name.firstName' //deep key dot notation
     */
    accessorKey?: DeepKeys<TData> | (string & {});
    aggregationFn?: Array<MRT_AggregationFn<TData>> | MRT_AggregationFn<TData>;
    /**
     * Specify what type of column this is. Either `data`, `display`, or `group`. Defaults to `data`.
     * Leave this blank if you are just creating a normal data column.
     *
     * @default 'data'
     *
     * @example columnDefType: 'display'
     */
    columnDefType?: 'data' | 'display' | 'group';
    columnFilterModeOptions?: Array<LiteralUnion<string & MRT_FilterOption>> | null;
    columns?: MRT_ColumnDef<TData, TValue>[];
    editSelectOptions?: ({
        label?: string;
        /**
         * @deprecated use `label` instead
         */
        text?: string;
        value: any;
    } | string)[];
    editVariant?: 'select' | 'text';
    enableClickToCopy?: boolean;
    enableColumnActions?: boolean;
    enableColumnDragging?: boolean;
    enableColumnFilterModes?: boolean;
    enableColumnOrdering?: boolean;
    enableEditing?: ((row: MRT_Row<TData>) => boolean) | boolean;
    enableFilterMatchHighlighting?: boolean;
    filterFn?: MRT_FilterFn<TData>;
    filterSelectOptions?: ({
        label?: string;
        /**
         * @deprecated use `label` instead
         */
        text?: string;
        value: any;
    } | string)[];
    filterVariant?: 'autocomplete' | 'checkbox' | 'date' | 'date-range' | 'multi-select' | 'range' | 'range-slider' | 'select' | 'text';
    /**
     * footer must be a string. If you want custom JSX to render the footer, you can also specify a `Footer` option. (Capital F)
     */
    footer?: string;
    /**
     * header must be a string. If you want custom JSX to render the header, you can also specify a `Header` option. (Capital H)
     */
    header: string;
    /**
     * Either an `accessorKey` or a combination of an `accessorFn` and `id` are required for a data column definition.
     *
     * If you have also specified an `accessorFn`, MRT still needs to have a valid `id` to be able to identify the column uniquely.
     *
     * `id` defaults to the `accessorKey` or `header` if not specified.
     *
     * @default gets set to the same value as `accessorKey` by default
     */
    id?: LiteralUnion<string & keyof TData>;
    muiColumnActionsButtonProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiColumnDragHandleProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiCopyButtonProps?: ((props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ButtonProps) | ButtonProps;
    muiEditTextFieldProps?: ((props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => TextFieldProps) | TextFieldProps;
    muiFilterAutocompleteProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => AutocompleteProps<any, any, any, any>) | AutocompleteProps<any, any, any, any>;
    muiFilterCheckboxProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => CheckboxProps) | CheckboxProps;
    muiFilterDatePickerProps?: ((props: {
        column: MRT_Column<TData>;
        rangeFilterIndex?: number;
        table: MRT_TableInstance<TData>;
    }) => DatePickerProps<any>) | DatePickerProps<any>;
    muiFilterSliderProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => SliderProps) | SliderProps;
    muiFilterTextFieldProps?: ((props: {
        column: MRT_Column<TData>;
        rangeFilterIndex?: number;
        table: MRT_TableInstance<TData>;
    }) => TextFieldProps) | TextFieldProps;
    muiTableBodyCellProps?: ((props: {
        cell: MRT_Cell<TData, TValue>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    muiTableFooterCellProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    muiTableHeadCellProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    renderColumnActionsMenuItems?: (props: {
        closeMenu: () => void;
        column: MRT_Column<TData>;
        internalColumnMenuItems: ReactNode[];
        table: MRT_TableInstance<TData>;
    }) => ReactNode[];
    renderColumnFilterModeMenuItems?: (props: {
        column: MRT_Column<TData>;
        internalFilterOptions: MRT_InternalFilterOption[];
        onSelectFilterMode: (filterMode: MRT_FilterOption) => void;
        table: MRT_TableInstance<TData>;
    }) => ReactNode[];
    sortingFn?: MRT_SortingFn<TData>;
};
type MRT_DisplayColumnDef<TData extends MRT_RowData, TValue = unknown> = Omit<MRT_ColumnDef<TData, TValue>, 'accessorFn' | 'accessorKey'>;
type MRT_GroupColumnDef<TData extends MRT_RowData> = MRT_DisplayColumnDef<TData, any> & {
    columns: MRT_ColumnDef<TData>[];
};
type MRT_DefinedColumnDef<TData extends MRT_RowData, TValue = unknown> = Omit<MRT_ColumnDef<TData, TValue>, 'defaultDisplayColumn' | 'id'> & {
    _filterFn: MRT_FilterOption;
    defaultDisplayColumn: Partial<MRT_ColumnDef<TData, TValue>>;
    id: string;
};
type MRT_Column<TData extends MRT_RowData, TValue = unknown> = Omit<Column<TData, TValue>, 'columnDef' | 'columns' | 'filterFn' | 'footer' | 'header'> & {
    columnDef: MRT_DefinedColumnDef<TData, TValue>;
    columns?: MRT_Column<TData, TValue>[];
    filterFn?: MRT_FilterFn<TData>;
    footer: string;
    header: string;
};
type MRT_Header<TData extends MRT_RowData> = Omit<Header<TData, unknown>, 'column'> & {
    column: MRT_Column<TData>;
};
type MRT_HeaderGroup<TData extends MRT_RowData> = Omit<HeaderGroup<TData>, 'headers'> & {
    headers: MRT_Header<TData>[];
};
type MRT_Row<TData extends MRT_RowData> = Omit<Row<TData>, '_valuesCache' | 'getAllCells' | 'getVisibleCells' | 'subRows'> & {
    _valuesCache: Record<LiteralUnion<string & DeepKeys<TData>>, any>;
    getAllCells: () => MRT_Cell<TData>[];
    getVisibleCells: () => MRT_Cell<TData>[];
    subRows?: MRT_Row<TData>[];
};
type MRT_Cell<TData extends MRT_RowData, TValue = unknown> = Omit<Cell<TData, TValue>, 'column' | 'row'> & {
    column: MRT_Column<TData, TValue>;
    row: MRT_Row<TData>;
};
type MRT_AggregationOption = string & keyof typeof MRT_AggregationFns;
type MRT_AggregationFn<TData extends MRT_RowData> = AggregationFn<TData> | MRT_AggregationOption;
type MRT_SortingOption = LiteralUnion<string & keyof typeof MRT_SortingFns>;
type MRT_SortingFn<TData extends MRT_RowData> = MRT_SortingOption | SortingFn<TData>;
type MRT_FilterOption = LiteralUnion<string & keyof typeof MRT_FilterFns>;
type MRT_FilterFn<TData extends MRT_RowData> = FilterFn<TData> | MRT_FilterOption;
type MRT_InternalFilterOption = {
    divider: boolean;
    label: string;
    option: string;
    symbol: string;
};
type MRT_DisplayColumnIds = 'mrt-row-actions' | 'mrt-row-drag' | 'mrt-row-expand' | 'mrt-row-numbers' | 'mrt-row-pin' | 'mrt-row-select' | 'mrt-row-spacer';
/**
 * `columns` and `data` props are the only required props, but there are over 170 other optional props.
 *
 * See more info on creating columns and data on the official docs site:
 * @link https://www.material-react-table.com/docs/getting-started/usage
 *
 * See the full props list on the official docs site:
 * @link https://www.material-react-table.com/docs/api/props
 */
type MRT_TableOptions<TData extends MRT_RowData> = Omit<Partial<TableOptions<TData>>, 'columns' | 'data' | 'defaultColumn' | 'enableRowSelection' | 'expandRowsFn' | 'getRowId' | 'globalFilterFn' | 'initialState' | 'onStateChange' | 'state'> & {
    columnFilterDisplayMode?: 'custom' | 'popover' | 'subheader';
    columnFilterModeOptions?: Array<LiteralUnion<string & MRT_FilterOption>> | null;
    columnVirtualizerInstanceRef?: MutableRefObject<Virtualizer<HTMLDivElement, HTMLTableCellElement> | null>;
    columnVirtualizerOptions?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => Partial<VirtualizerOptions<HTMLDivElement, HTMLTableCellElement>>) | Partial<VirtualizerOptions<HTMLDivElement, HTMLTableCellElement>>;
    /**
     * The columns to display in the table. `accessorKey`s or `accessorFn`s must match keys in the `data` table option.
     *
     * See more info on creating columns on the official docs site:
     * @link https://www.material-react-table.com/docs/guides/data-columns
     * @link https://www.material-react-table.com/docs/guides/display-columns
     *
     * See all Columns Options on the official docs site:
     * @link https://www.material-react-table.com/docs/api/column-options
     */
    columns: MRT_ColumnDef<TData, any>[];
    createDisplayMode?: 'custom' | 'modal' | 'row';
    /**
     * Pass your data as an array of objects. Objects can theoretically be any shape, but it's best to keep them consistent.
     *
     * See the usage guide for more info on creating columns and data:
     * @link https://www.material-react-table.com/docs/getting-started/usage
     */
    data: TData[];
    /**
     * Instead of specifying a bunch of the same options for each column, you can just change an option in the `defaultColumn` table option to change a default option for all columns.
     */
    defaultColumn?: Partial<MRT_ColumnDef<TData>>;
    /**
     * Change the default options for display columns.
     */
    defaultDisplayColumn?: Partial<MRT_DisplayColumnDef<TData>>;
    displayColumnDefOptions?: Partial<{
        [key in MRT_DisplayColumnIds]: Partial<MRT_DisplayColumnDef<TData>>;
    }>;
    editDisplayMode?: 'cell' | 'custom' | 'modal' | 'row' | 'table';
    enableBottomToolbar?: boolean;
    enableClickToCopy?: boolean;
    enableColumnActions?: boolean;
    enableColumnDragging?: boolean;
    enableColumnFilterModes?: boolean;
    enableColumnOrdering?: boolean;
    enableColumnVirtualization?: boolean;
    enableDensityToggle?: boolean;
    enableEditing?: ((row: MRT_Row<TData>) => boolean) | boolean;
    enableExpandAll?: boolean;
    enableFacetedValues?: boolean;
    enableFilterMatchHighlighting?: boolean;
    enableFullScreenToggle?: boolean;
    enableGlobalFilterModes?: boolean;
    enableGlobalFilterRankedResults?: boolean;
    enablePagination?: boolean;
    enableRowActions?: boolean;
    enableRowDragging?: boolean;
    enableRowNumbers?: boolean;
    enableRowOrdering?: boolean;
    enableRowSelection?: ((row: MRT_Row<TData>) => boolean) | boolean;
    enableRowVirtualization?: boolean;
    enableSelectAll?: boolean;
    enableStickyFooter?: boolean;
    enableStickyHeader?: boolean;
    enableTableFooter?: boolean;
    enableTableHead?: boolean;
    enableToolbarInternalActions?: boolean;
    enableTopToolbar?: boolean;
    expandRowsFn?: (dataRow: TData) => TData[];
    getRowId?: (originalRow: TData, index: number, parentRow: MRT_Row<TData>) => string;
    globalFilterFn?: MRT_FilterOption;
    globalFilterModeOptions?: MRT_FilterOption[] | null;
    icons?: Partial<MRT_Icons>;
    initialState?: Partial<MRT_TableState<TData>>;
    /**
     * Changes which kind of CSS layout is used to render the table. `semantic` uses default semantic HTML elements, while `grid` adds CSS grid and flexbox styles
     */
    layoutMode?: 'grid' | 'grid-no-grow' | 'semantic';
    /**
     * Pass in either a locale imported from `material-react-table/locales/*` or a custom locale object.
     *
     * See the localization (i18n) guide for more info:
     * @link https://www.material-react-table.com/docs/guides/localization
     */
    localization?: Partial<MRT_Localization>;
    /**
     * Memoize cells, rows, or the entire table body to potentially improve render performance.
     *
     * @warning This will break some dynamic rendering features. See the memoization guide for more info:
     * @link https://www.material-react-table.com/docs/guides/memoize-components
     */
    memoMode?: 'cells' | 'rows' | 'table-body';
    mrtTheme?: ((theme: Theme) => MRT_Theme) | MRT_Theme;
    muiBottomToolbarProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => BoxProps) | BoxProps;
    muiCircularProgressProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => CircularProgressProps) | CircularProgressProps;
    muiColumnActionsButtonProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiColumnDragHandleProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiCopyButtonProps?: ((props: {
        cell: MRT_Cell<TData>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ButtonProps) | ButtonProps;
    muiCreateRowModalProps?: ((props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => DialogProps) | DialogProps;
    muiDetailPanelProps?: ((props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    muiEditRowDialogProps?: ((props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => DialogProps) | DialogProps;
    muiEditTextFieldProps?: ((props: {
        cell: MRT_Cell<TData>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => TextFieldProps) | TextFieldProps;
    muiExpandAllButtonProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiExpandButtonProps?: ((props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiFilterAutocompleteProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => AutocompleteProps<any, any, any, any>) | AutocompleteProps<any, any, any, any>;
    muiFilterCheckboxProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => CheckboxProps) | CheckboxProps;
    muiFilterDatePickerProps?: ((props: {
        column: MRT_Column<TData>;
        rangeFilterIndex?: number;
        table: MRT_TableInstance<TData>;
    }) => DatePickerProps<any>) | DatePickerProps<any>;
    muiFilterSliderProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => SliderProps) | SliderProps;
    muiFilterTextFieldProps?: ((props: {
        column: MRT_Column<TData>;
        rangeFilterIndex?: number;
        table: MRT_TableInstance<TData>;
    }) => TextFieldProps) | TextFieldProps;
    muiLinearProgressProps?: ((props: {
        isTopToolbar: boolean;
        table: MRT_TableInstance<TData>;
    }) => LinearProgressProps) | LinearProgressProps;
    muiPaginationProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => Partial<PaginationProps & {
        SelectProps?: Partial<SelectProps>;
        rowsPerPageOptions?: {
            label: string;
            value: number;
        }[] | number[];
        showRowsPerPage?: boolean;
    }>) | Partial<PaginationProps & {
        SelectProps?: Partial<SelectProps>;
        rowsPerPageOptions?: {
            label: string;
            value: number;
        }[] | number[];
        showRowsPerPage?: boolean;
    }>;
    muiRowDragHandleProps?: ((props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => IconButtonProps) | IconButtonProps;
    muiSearchTextFieldProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => TextFieldProps) | TextFieldProps;
    muiSelectAllCheckboxProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => CheckboxProps) | CheckboxProps;
    muiSelectCheckboxProps?: ((props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => CheckboxProps | RadioProps) | (CheckboxProps | RadioProps);
    muiSkeletonProps?: ((props: {
        cell: MRT_Cell<TData>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => SkeletonProps) | SkeletonProps;
    muiTableBodyCellProps?: ((props: {
        cell: MRT_Cell<TData>;
        column: MRT_Column<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    muiTableBodyProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => TableBodyProps) | TableBodyProps;
    muiTableBodyRowProps?: ((props: {
        isDetailPanel?: boolean;
        row: MRT_Row<TData>;
        staticRowIndex: number;
        table: MRT_TableInstance<TData>;
    }) => TableRowProps) | TableRowProps;
    muiTableContainerProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => TableContainerProps) | TableContainerProps;
    muiTableFooterCellProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    muiTableFooterProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => TableFooterProps) | TableFooterProps;
    muiTableFooterRowProps?: ((props: {
        footerGroup: MRT_HeaderGroup<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableRowProps) | TableRowProps;
    muiTableHeadCellProps?: ((props: {
        column: MRT_Column<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableCellProps) | TableCellProps;
    muiTableHeadProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => TableHeadProps) | TableHeadProps;
    muiTableHeadRowProps?: ((props: {
        headerGroup: MRT_HeaderGroup<TData>;
        table: MRT_TableInstance<TData>;
    }) => TableRowProps) | TableRowProps;
    muiTablePaperProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => PaperProps) | PaperProps;
    muiTableProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => TableProps) | TableProps;
    muiToolbarAlertBannerChipProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => ChipProps) | ChipProps;
    muiToolbarAlertBannerProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => AlertProps) | AlertProps;
    muiTopToolbarProps?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => BoxProps) | BoxProps;
    onColumnFilterFnsChange?: OnChangeFn<{
        [key: string]: MRT_FilterOption;
    }>;
    onCreatingRowCancel?: (props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => void;
    onCreatingRowChange?: OnChangeFn<MRT_Row<TData> | null>;
    onCreatingRowSave?: (props: {
        exitCreatingMode: () => void;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
        values: Record<LiteralUnion<string & DeepKeys<TData>>, any>;
    }) => void;
    onDensityChange?: OnChangeFn<MRT_DensityState>;
    onDraggingColumnChange?: OnChangeFn<MRT_Column<TData> | null>;
    onDraggingRowChange?: OnChangeFn<MRT_Row<TData> | null>;
    onEditingCellChange?: OnChangeFn<MRT_Cell<TData> | null>;
    onEditingRowCancel?: (props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => void;
    onEditingRowChange?: OnChangeFn<MRT_Row<TData> | null>;
    onEditingRowSave?: (props: {
        exitEditingMode: () => void;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
        values: Record<LiteralUnion<string & DeepKeys<TData>>, any>;
    }) => Promise<void> | void;
    onGlobalFilterFnChange?: OnChangeFn<MRT_FilterOption>;
    onHoveredColumnChange?: OnChangeFn<Partial<MRT_Column<TData>> | null>;
    onHoveredRowChange?: OnChangeFn<Partial<MRT_Row<TData>> | null>;
    onIsFullScreenChange?: OnChangeFn<boolean>;
    onShowAlertBannerChange?: OnChangeFn<boolean>;
    onShowColumnFiltersChange?: OnChangeFn<boolean>;
    onShowGlobalFilterChange?: OnChangeFn<boolean>;
    onShowToolbarDropZoneChange?: OnChangeFn<boolean>;
    paginationDisplayMode?: 'custom' | 'default' | 'pages';
    positionActionsColumn?: 'first' | 'last';
    positionExpandColumn?: 'first' | 'last';
    positionGlobalFilter?: 'left' | 'none' | 'right';
    positionPagination?: 'both' | 'bottom' | 'none' | 'top';
    positionToolbarAlertBanner?: 'bottom' | 'head-overlay' | 'none' | 'top';
    positionToolbarDropZone?: 'both' | 'bottom' | 'none' | 'top';
    renderBottomToolbar?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => ReactNode) | ReactNode;
    renderBottomToolbarCustomActions?: (props: {
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderColumnActionsMenuItems?: (props: {
        closeMenu: () => void;
        column: MRT_Column<TData>;
        internalColumnMenuItems: ReactNode[];
        table: MRT_TableInstance<TData>;
    }) => ReactNode[];
    renderColumnFilterModeMenuItems?: (props: {
        column: MRT_Column<TData>;
        internalFilterOptions: MRT_InternalFilterOption[];
        onSelectFilterMode: (filterMode: MRT_FilterOption) => void;
        table: MRT_TableInstance<TData>;
    }) => ReactNode[];
    renderCreateRowDialogContent?: (props: {
        internalEditComponents: ReactNode[];
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderDetailPanel?: (props: {
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderEditRowDialogContent?: (props: {
        internalEditComponents: ReactNode[];
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderEmptyRowsFallback?: (props: {
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderGlobalFilterModeMenuItems?: (props: {
        internalFilterOptions: MRT_InternalFilterOption[];
        onSelectFilterMode: (filterMode: MRT_FilterOption) => void;
        table: MRT_TableInstance<TData>;
    }) => ReactNode[];
    renderRowActionMenuItems?: (props: {
        closeMenu: () => void;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode[];
    renderRowActions?: (props: {
        cell: MRT_Cell<TData>;
        row: MRT_Row<TData>;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderToolbarAlertBannerContent?: (props: {
        groupedAlert: ReactNode | null;
        selectedAlert: ReactNode | null;
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderToolbarInternalActions?: (props: {
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    renderTopToolbar?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => ReactNode) | ReactNode;
    renderTopToolbarCustomActions?: (props: {
        table: MRT_TableInstance<TData>;
    }) => ReactNode;
    rowCount?: number;
    rowNumberDisplayMode?: 'original' | 'static';
    rowPinningDisplayMode?: 'bottom' | 'select-bottom' | 'select-sticky' | 'select-top' | 'sticky' | 'top' | 'top-and-bottom';
    rowVirtualizerInstanceRef?: MutableRefObject<Virtualizer<HTMLDivElement, HTMLTableRowElement> | null>;
    rowVirtualizerOptions?: ((props: {
        table: MRT_TableInstance<TData>;
    }) => Partial<VirtualizerOptions<HTMLDivElement, HTMLTableRowElement>>) | Partial<VirtualizerOptions<HTMLDivElement, HTMLTableRowElement>>;
    selectAllMode?: 'all' | 'page';
    /**
     * Manage state externally any way you want, then pass it back into MRT.
     */
    state?: Partial<MRT_TableState<TData>>;
};

type TableInstanceProp<TData extends MRT_RowData> = {
    table: MRT_TableInstance<TData>;
};
type Props$U<TData extends MRT_RowData> = Xor<TableInstanceProp<TData>, MRT_TableOptions<TData>>;
declare const MaterialReactTable: <TData extends MRT_RowData>(props: Props$U<TData>) => react_jsx_runtime.JSX.Element;

interface Props$T<TData extends MRT_RowData> extends TableBodyProps {
    columnVirtualizer?: Virtualizer<HTMLDivElement, HTMLTableCellElement>;
    table: MRT_TableInstance<TData>;
    virtualColumns?: VirtualItem[];
    virtualPaddingLeft?: number;
    virtualPaddingRight?: number;
}
declare const MRT_TableBody: <TData extends MRT_RowData>({ columnVirtualizer, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, ...rest }: Props$T<TData>) => react_jsx_runtime.JSX.Element;
declare const Memo_MRT_TableBody: <TData extends MRT_RowData>({ columnVirtualizer, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, ...rest }: Props$T<TData>) => react_jsx_runtime.JSX.Element;

interface Props$S<TData extends MRT_RowData> extends TableCellProps {
    cell: MRT_Cell<TData>;
    measureElement?: (element: HTMLTableCellElement) => void;
    numRows?: number;
    rowIndex: number;
    rowRef: RefObject<HTMLTableRowElement>;
    table: MRT_TableInstance<TData>;
    virtualIndex?: number;
}
declare const MRT_TableBodyCell: <TData extends MRT_RowData>({ cell, measureElement, numRows, rowIndex, rowRef, table, virtualIndex, ...rest }: Props$S<TData>) => react_jsx_runtime.JSX.Element;
declare const Memo_MRT_TableBodyCell: <TData extends MRT_RowData>({ cell, measureElement, numRows, rowIndex, rowRef, table, virtualIndex, ...rest }: Props$S<TData>) => react_jsx_runtime.JSX.Element;

interface Props$R<TData extends MRT_RowData> {
    cell: MRT_Cell<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableBodyCellValue: <TData extends MRT_RowData>({ cell, table, }: Props$R<TData>) => ReactNode;

interface Props$Q<TData extends MRT_RowData> {
    columnVirtualizer?: Virtualizer<HTMLDivElement, HTMLTableCellElement>;
    measureElement?: (element: HTMLTableRowElement) => void;
    numRows?: number;
    pinnedRowIds?: string[];
    row: MRT_Row<TData>;
    rowIndex: number;
    table: MRT_TableInstance<TData>;
    virtualColumns?: VirtualItem[];
    virtualPaddingLeft?: number;
    virtualPaddingRight?: number;
    virtualRow?: VirtualItem;
}
declare const MRT_TableBodyRow: <TData extends MRT_RowData>({ columnVirtualizer, measureElement, numRows, pinnedRowIds, row, rowIndex, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, virtualRow, }: Props$Q<TData>) => react_jsx_runtime.JSX.Element;
declare const Memo_MRT_TableBodyRow: <TData extends MRT_RowData>({ columnVirtualizer, measureElement, numRows, pinnedRowIds, row, rowIndex, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, virtualRow, }: Props$Q<TData>) => react_jsx_runtime.JSX.Element;

interface Props$P<TData extends MRT_RowData> extends IconButtonProps {
    row: MRT_Row<TData>;
    rowRef: RefObject<HTMLTableRowElement>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableBodyRowGrabHandle: <TData extends MRT_RowData>({ row, rowRef, table, ...rest }: Props$P<TData>) => react_jsx_runtime.JSX.Element;

interface Props$O<TData extends MRT_RowData> extends IconButtonProps {
    row: MRT_Row<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableBodyRowPinButton: <TData extends MRT_RowData>({ row, table, ...rest }: Props$O<TData>) => react_jsx_runtime.JSX.Element | null;

interface Props$N<TData extends MRT_RowData> extends TableCellProps {
    parentRowRef: RefObject<HTMLTableRowElement>;
    row: MRT_Row<TData>;
    rowIndex: number;
    table: MRT_TableInstance<TData>;
    virtualRow?: VirtualItem;
}
declare const MRT_TableDetailPanel: <TData extends MRT_RowData>({ parentRowRef, row, rowIndex, table, virtualRow, ...rest }: Props$N<TData>) => react_jsx_runtime.JSX.Element;

interface Props$M<TData extends MRT_RowData> extends BoxProps {
    column: MRT_Column<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ColumnPinningButtons: <TData extends MRT_RowData>({ column, table, ...rest }: Props$M<TData>) => react_jsx_runtime.JSX.Element;

interface Props$L<TData extends MRT_RowData> extends ButtonProps {
    cell: MRT_Cell<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_CopyButton: <TData extends MRT_RowData>({ cell, table, ...rest }: Props$L<TData>) => react_jsx_runtime.JSX.Element;

interface Props$K<TData extends MRT_RowData> extends BoxProps {
    row: MRT_Row<TData>;
    table: MRT_TableInstance<TData>;
    variant?: 'icon' | 'text';
}
declare const MRT_EditActionButtons: <TData extends MRT_RowData>({ row, table, variant, ...rest }: Props$K<TData>) => react_jsx_runtime.JSX.Element;

interface Props$J<TData extends MRT_RowData> extends IconButtonProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ExpandAllButton: <TData extends MRT_RowData>({ table, ...rest }: Props$J<TData>) => react_jsx_runtime.JSX.Element;

interface Props$I<TData extends MRT_RowData> extends IconButtonProps {
    row: MRT_Row<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ExpandButton: <TData extends MRT_RowData>({ row, table, }: Props$I<TData>) => react_jsx_runtime.JSX.Element;

interface Props$H<TData extends MRT_RowData> extends IconButtonProps {
    iconButtonProps?: IconButtonProps;
    location?: 'column' | 'row';
    onDragEnd: DragEventHandler<HTMLButtonElement>;
    onDragStart: DragEventHandler<HTMLButtonElement>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_GrabHandleButton: <TData extends MRT_RowData>({ iconButtonProps, location, onDragEnd, onDragStart, table, ...rest }: Props$H<TData>) => react_jsx_runtime.JSX.Element;

interface Props$G<TData extends MRT_RowData> extends IconButtonProps {
    pinningPosition: RowPinningPosition;
    row: MRT_Row<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_RowPinButton: <TData extends MRT_RowData>({ pinningPosition, row, table, ...rest }: Props$G<TData>) => react_jsx_runtime.JSX.Element;

interface Props$F<TData extends MRT_RowData> extends IconButtonProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ShowHideColumnsButton: <TData extends MRT_RowData>({ table, ...rest }: Props$F<TData>) => react_jsx_runtime.JSX.Element;

interface Props$E<TData extends MRT_RowData> extends IconButtonProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToggleDensePaddingButton: <TData extends MRT_RowData>({ table, ...rest }: Props$E<TData>) => react_jsx_runtime.JSX.Element;

interface Props$D<TData extends MRT_RowData> extends IconButtonProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToggleFiltersButton: <TData extends MRT_RowData>({ table, ...rest }: Props$D<TData>) => react_jsx_runtime.JSX.Element;

interface Props$C<TData extends MRT_RowData> extends IconButtonProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToggleFullScreenButton: <TData extends MRT_RowData>({ table, ...rest }: Props$C<TData>) => react_jsx_runtime.JSX.Element;

interface Props$B<TData extends MRT_RowData> extends IconButtonProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToggleGlobalFilterButton: <TData extends MRT_RowData>({ table, ...rest }: Props$B<TData>) => react_jsx_runtime.JSX.Element;

interface Props$A<TData extends MRT_RowData> extends IconButtonProps {
    cell: MRT_Cell<TData>;
    row: MRT_Row<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToggleRowActionMenuButton: <TData extends MRT_RowData>({ cell, row, table, ...rest }: Props$A<TData>) => react_jsx_runtime.JSX.Element;

declare const getColumnId: <TData extends MRT_RowData>(columnDef: MRT_ColumnDef<TData>) => string;
declare const getAllLeafColumnDefs: <TData extends MRT_RowData>(columns: MRT_ColumnDef<TData>[]) => MRT_ColumnDef<TData>[];
declare const prepareColumns: <TData extends MRT_RowData>({ aggregationFns, columnDefs, columnFilterFns, defaultDisplayColumn, filterFns, sortingFns, }: {
    aggregationFns: {
        sum: _tanstack_react_table.AggregationFn<any>;
        min: _tanstack_react_table.AggregationFn<any>;
        max: _tanstack_react_table.AggregationFn<any>;
        extent: _tanstack_react_table.AggregationFn<any>;
        mean: _tanstack_react_table.AggregationFn<any>;
        median: _tanstack_react_table.AggregationFn<any>;
        unique: _tanstack_react_table.AggregationFn<any>;
        uniqueCount: _tanstack_react_table.AggregationFn<any>;
        count: _tanstack_react_table.AggregationFn<any>;
    } & Record<string, _tanstack_react_table.AggregationFn<any>>;
    columnDefs: MRT_ColumnDef<TData>[];
    columnFilterFns: {
        [key: string]: MRT_FilterOption;
    };
    defaultDisplayColumn: Partial<MRT_ColumnDef<TData>>;
    filterFns: {
        between: {
            <TData_1 extends MRT_RowData>(row: Row<TData_1>, id: string, filterValues: [string | number, string | number]): boolean;
            autoRemove(val: any): boolean;
        };
        betweenInclusive: {
            <TData_2 extends MRT_RowData>(row: Row<TData_2>, id: string, filterValues: [string | number, string | number]): boolean;
            autoRemove(val: any): boolean;
        };
        contains: {
            <TData_3 extends MRT_RowData>(row: Row<TData_3>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        empty: {
            <TData_4 extends MRT_RowData>(row: Row<TData_4>, id: string, _filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        endsWith: {
            <TData_5 extends MRT_RowData>(row: Row<TData_5>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        equals: {
            <TData_6 extends MRT_RowData>(row: Row<TData_6>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        fuzzy: {
            <TData_7 extends MRT_RowData>(row: Row<TData_7>, columnId: string, filterValue: string | number, addMeta: (item: _tanstack_match_sorter_utils.RankingInfo) => void): boolean;
            autoRemove(val: any): boolean;
        };
        greaterThan: {
            <TData_8 extends MRT_RowData>(row: Row<TData_8>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        greaterThanOrEqualTo: {
            <TData_9 extends MRT_RowData>(row: Row<TData_9>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        lessThan: {
            <TData_10 extends MRT_RowData>(row: Row<TData_10>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        lessThanOrEqualTo: {
            <TData_11 extends MRT_RowData>(row: Row<TData_11>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        notEmpty: {
            <TData_12 extends MRT_RowData>(row: Row<TData_12>, id: string, _filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        notEquals: {
            <TData_13 extends MRT_RowData>(row: Row<TData_13>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        startsWith: {
            <TData_14 extends MRT_RowData>(row: Row<TData_14>, id: string, filterValue: string | number): boolean;
            autoRemove(val: any): boolean;
        };
        includesString: _tanstack_react_table.FilterFn<any>;
        includesStringSensitive: _tanstack_react_table.FilterFn<any>;
        equalsString: _tanstack_react_table.FilterFn<any>;
        arrIncludes: _tanstack_react_table.FilterFn<any>;
        arrIncludesAll: _tanstack_react_table.FilterFn<any>;
        arrIncludesSome: _tanstack_react_table.FilterFn<any>;
        weakEquals: _tanstack_react_table.FilterFn<any>;
        inNumberRange: _tanstack_react_table.FilterFn<any>;
    } & Record<string, _tanstack_react_table.FilterFn<any>>;
    sortingFns: {
        fuzzy: <TData_15 extends MRT_RowData>(rowA: Row<TData_15>, rowB: Row<TData_15>, columnId: string) => number;
        alphanumeric: _tanstack_react_table.SortingFn<any>;
        alphanumericCaseSensitive: _tanstack_react_table.SortingFn<any>;
        text: _tanstack_react_table.SortingFn<any>;
        textCaseSensitive: _tanstack_react_table.SortingFn<any>;
        datetime: _tanstack_react_table.SortingFn<any>;
        basic: _tanstack_react_table.SortingFn<any>;
    } & Record<string, _tanstack_react_table.SortingFn<any>>;
}) => MRT_DefinedColumnDef<TData>[];
declare const reorderColumn: <TData extends MRT_RowData>(draggedColumn: MRT_Column<TData>, targetColumn: MRT_Column<TData>, columnOrder: ColumnOrderState) => ColumnOrderState;
declare const showExpandColumn: <TData extends MRT_RowData>(props: MRT_TableOptions<TData>, grouping?: GroupingState) => boolean;
declare const getLeadingDisplayColumnIds: <TData extends MRT_RowData>(props: MRT_TableOptions<TData>) => MRT_DisplayColumnIds[];
declare const getTrailingDisplayColumnIds: <TData extends MRT_RowData>(props: MRT_TableOptions<TData>) => MRT_DisplayColumnIds[];
declare const getDefaultColumnOrderIds: <TData extends MRT_RowData>(props: MRT_TableOptions<TData>) => string[];
declare const getDefaultColumnFilterFn: <TData extends MRT_RowData>(columnDef: MRT_ColumnDef<TData>) => MRT_FilterOption;
declare const getIsFirstColumn: <TData extends MRT_RowData>(column: MRT_Column<TData>, table: MRT_TableInstance<TData>) => boolean;
declare const getIsLastColumn: <TData extends MRT_RowData>(column: MRT_Column<TData>, table: MRT_TableInstance<TData>) => boolean;
declare const getIsLastLeftPinnedColumn: <TData extends MRT_RowData>(table: MRT_TableInstance<TData>, column: MRT_Column<TData>) => boolean;
declare const getIsFirstRightPinnedColumn: <TData extends MRT_RowData>(column: MRT_Column<TData>) => boolean;
declare const getTotalRight: <TData extends MRT_RowData>(table: MRT_TableInstance<TData>, column: MRT_Column<TData>) => number;
declare const getCanRankRows: <TData extends MRT_RowData>(table: MRT_TableInstance<TData>) => boolean | undefined;
declare const parseFromValuesOrFunc: <T, U>(fn: T | ((arg: U) => T) | undefined, arg: U) => T | undefined;
declare const flexRender: (Comp: Renderable<any>, props: any) => JSX.Element | ReactNode;
declare const createRow: <TData extends MRT_RowData>(table: MRT_TableInstance<TData>, originalRow?: TData | undefined) => MRT_Row<TData>;
declare const extraIndexRangeExtractor: (range: Range, draggingIndex: number) => number[];
declare function createMRTColumnHelper<TData extends MRT_RowData>(): MRT_ColumnHelper<TData>;
declare const getValueAndLabel: (option: {
    label?: string;
    text?: string;
    value: string;
} | string) => {
    label: string;
    value: string;
};

interface Props$z<TData extends MRT_RowData> extends TableFooterProps {
    table: MRT_TableInstance<TData>;
    virtualColumns?: VirtualItem[];
    virtualPaddingLeft?: number;
    virtualPaddingRight?: number;
}
declare const MRT_TableFooter: <TData extends MRT_RowData>({ table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, ...rest }: Props$z<TData>) => react_jsx_runtime.JSX.Element;

interface Props$y<TData extends MRT_RowData> extends TableCellProps {
    footer: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableFooterCell: <TData extends MRT_RowData>({ footer, table, ...rest }: Props$y<TData>) => react_jsx_runtime.JSX.Element;

interface Props$x<TData extends MRT_RowData> extends TableRowProps {
    footerGroup: MRT_HeaderGroup<TData>;
    table: MRT_TableInstance<TData>;
    virtualColumns?: VirtualItem[];
    virtualPaddingLeft?: number;
    virtualPaddingRight?: number;
}
declare const MRT_TableFooterRow: <TData extends MRT_RowData>({ footerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, ...rest }: Props$x<TData>) => react_jsx_runtime.JSX.Element | null;

interface Props$w<TData extends MRT_RowData> extends TableHeadProps {
    table: MRT_TableInstance<TData>;
    virtualColumns?: VirtualItem[];
    virtualPaddingLeft?: number;
    virtualPaddingRight?: number;
}
declare const MRT_TableHead: <TData extends MRT_RowData>({ table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, ...rest }: Props$w<TData>) => react_jsx_runtime.JSX.Element;

interface Props$v<TData extends MRT_RowData> extends TableCellProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableHeadCell: <TData extends MRT_RowData>({ header, table, ...rest }: Props$v<TData>) => react_jsx_runtime.JSX.Element;

interface Props$u<TData extends MRT_RowData> extends IconButtonProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableHeadCellColumnActionsButton: <TData extends MRT_RowData>({ header, table, ...rest }: Props$u<TData>) => react_jsx_runtime.JSX.Element;

interface Props$t<TData extends MRT_RowData> extends CollapseProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableHeadCellFilterContainer: <TData extends MRT_RowData>({ header, table, ...rest }: Props$t<TData>) => react_jsx_runtime.JSX.Element;

interface Props$s<TData extends MRT_RowData> extends IconButtonProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableHeadCellFilterLabel: <TData extends MRT_RowData = {}>({ header, table, ...rest }: Props$s<TData>) => react_jsx_runtime.JSX.Element;

interface Props$r<TData extends MRT_RowData> extends IconButtonProps {
    column: MRT_Column<TData>;
    table: MRT_TableInstance<TData>;
    tableHeadCellRef: RefObject<HTMLTableCellElement>;
}
declare const MRT_TableHeadCellGrabHandle: <TData extends MRT_RowData>({ column, table, tableHeadCellRef, ...rest }: Props$r<TData>) => react_jsx_runtime.JSX.Element;

interface Props$q<TData extends MRT_RowData> extends DividerProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableHeadCellResizeHandle: <TData extends MRT_RowData>({ header, table, ...rest }: Props$q<TData>) => react_jsx_runtime.JSX.Element;

interface Props$p<TData extends MRT_RowData> extends TableSortLabelProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableHeadCellSortLabel: <TData extends MRT_RowData>({ header, table, ...rest }: Props$p<TData>) => react_jsx_runtime.JSX.Element;

interface Props$o<TData extends MRT_RowData> extends TableRowProps {
    headerGroup: MRT_HeaderGroup<TData>;
    table: MRT_TableInstance<TData>;
    virtualColumns?: VirtualItem[];
    virtualPaddingLeft?: number;
    virtualPaddingRight?: number;
}
declare const MRT_TableHeadRow: <TData extends MRT_RowData>({ headerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, ...rest }: Props$o<TData>) => react_jsx_runtime.JSX.Element;

interface Params<TData extends MRT_RowData> {
    columnOrder: ColumnOrderState;
    creatingRow: MRT_Row<TData> | null;
    grouping: GroupingState;
    tableOptions: MRT_DefinedTableOptions<TData>;
}
declare const useMRT_DisplayColumns: <TData extends MRT_RowData>({ columnOrder, creatingRow, grouping, tableOptions, }: Params<TData>) => MRT_ColumnDef<TData>[];

declare const useMRT_Effects: <TData extends MRT_RowData>(table: MRT_TableInstance<TData>) => void;

declare const useMRT_TableInstance: <TData extends MRT_RowData>(tableOptions: MRT_DefinedTableOptions<TData>) => MRT_TableInstance<TData>;

declare const MRT_DefaultColumn: {
    readonly filterVariant: "text";
    readonly maxSize: 1000;
    readonly minSize: 40;
    readonly size: 180;
};
declare const MRT_DefaultDisplayColumn: {
    readonly columnDefType: "display";
    readonly enableClickToCopy: false;
    readonly enableColumnActions: false;
    readonly enableColumnDragging: false;
    readonly enableColumnFilter: false;
    readonly enableColumnOrdering: false;
    readonly enableEditing: false;
    readonly enableGlobalFilter: false;
    readonly enableGrouping: false;
    readonly enableHiding: false;
    readonly enableResizing: false;
    readonly enableSorting: false;
};
declare const useMRT_TableOptions: <TData extends MRT_RowData>(tableOptions: MRT_TableOptions<TData>) => MRT_DefinedTableOptions<TData>;

interface Props$n<TData extends MRT_RowData> extends TextFieldProps<'standard'> {
    cell: MRT_Cell<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_EditCellTextField: <TData extends MRT_RowData>({ cell, table, ...rest }: Props$n<TData>) => react_jsx_runtime.JSX.Element;

interface Props$m<TData extends MRT_RowData> extends CheckboxProps {
    column: MRT_Column<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_FilterCheckbox: <TData extends MRT_RowData>({ column, table, ...rest }: Props$m<TData>) => react_jsx_runtime.JSX.Element;

interface Props$l<TData extends MRT_RowData> extends BoxProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_FilterRangeFields: <TData extends MRT_RowData>({ header, table, ...rest }: Props$l<TData>) => react_jsx_runtime.JSX.Element;

interface Props$k<TData extends MRT_RowData> extends SliderProps {
    header: MRT_Header<TData>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_FilterRangeSlider: <TData extends MRT_RowData>({ header, table, ...rest }: Props$k<TData>) => react_jsx_runtime.JSX.Element;

interface Props$j<TData extends MRT_RowData> extends TextFieldProps<'standard'> {
    header: MRT_Header<TData>;
    rangeFilterIndex?: number;
    table: MRT_TableInstance<TData>;
}
declare const MRT_FilterTextField: <TData extends MRT_RowData>({ header, rangeFilterIndex, table, ...rest }: Props$j<TData>) => react_jsx_runtime.JSX.Element;

interface Props$i<TData extends MRT_RowData> extends TextFieldProps<'standard'> {
    table: MRT_TableInstance<TData>;
}
declare const MRT_GlobalFilterTextField: <TData extends MRT_RowData>({ table, ...rest }: Props$i<TData>) => react_jsx_runtime.JSX.Element;

interface Props$h<TData extends MRT_RowData> extends CheckboxProps {
    row?: MRT_Row<TData>;
    selectAll?: boolean;
    table: MRT_TableInstance<TData>;
}
declare const MRT_SelectCheckbox: <TData extends MRT_RowData>({ row, selectAll, table, ...rest }: Props$h<TData>) => react_jsx_runtime.JSX.Element;

declare const commonMenuItemStyles: {
    alignItems: string;
    justifyContent: string;
    my: number;
    py: string;
};
declare const commonListItemStyles: {
    alignItems: string;
    display: string;
};
interface Props$g<TData extends MRT_RowData> extends Partial<MenuProps> {
    anchorEl: HTMLElement | null;
    header: MRT_Header<TData>;
    setAnchorEl: (anchorEl: HTMLElement | null) => void;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ColumnActionMenu: <TData extends MRT_RowData>({ anchorEl, header, setAnchorEl, table, ...rest }: Props$g<TData>) => react_jsx_runtime.JSX.Element;

declare const mrtFilterOptions: (localization: MRT_Localization) => MRT_InternalFilterOption[];
interface Props$f<TData extends MRT_RowData> extends Partial<MenuProps> {
    anchorEl: HTMLElement | null;
    header?: MRT_Header<TData>;
    onSelect?: () => void;
    setAnchorEl: (anchorEl: HTMLElement | null) => void;
    setFilterValue?: (filterValue: any) => void;
    table: MRT_TableInstance<TData>;
}
declare const MRT_FilterOptionMenu: <TData extends MRT_RowData>({ anchorEl, header, onSelect, setAnchorEl, setFilterValue, table, ...rest }: Props$f<TData>) => react_jsx_runtime.JSX.Element;

interface Props$e<TData extends MRT_RowData> extends Partial<MenuProps> {
    anchorEl: HTMLElement | null;
    handleEdit: (event: MouseEvent) => void;
    row: MRT_Row<TData>;
    setAnchorEl: (anchorEl: HTMLElement | null) => void;
    table: MRT_TableInstance<TData>;
}
declare const MRT_RowActionMenu: <TData extends MRT_RowData>({ anchorEl, handleEdit, row, setAnchorEl, table, ...rest }: Props$e<TData>) => react_jsx_runtime.JSX.Element;

interface Props$d<TData extends MRT_RowData> extends Partial<MenuProps> {
    anchorEl: HTMLElement | null;
    isSubMenu?: boolean;
    setAnchorEl: (anchorEl: HTMLElement | null) => void;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ShowHideColumnsMenu: <TData extends MRT_RowData>({ anchorEl, setAnchorEl, table, ...rest }: Props$d<TData>) => react_jsx_runtime.JSX.Element;

interface Props$c<TData extends MRT_RowData> extends MenuItemProps {
    allColumns: MRT_Column<TData>[];
    column: MRT_Column<TData>;
    hoveredColumn: MRT_Column<TData> | null;
    setHoveredColumn: Dispatch<SetStateAction<MRT_Column<TData> | null>>;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ShowHideColumnsMenuItems: <TData extends MRT_RowData>({ allColumns, column, hoveredColumn, setHoveredColumn, table, ...rest }: Props$c<TData>) => react_jsx_runtime.JSX.Element | null;

interface Props$b<TData extends MRT_RowData> extends Partial<DialogProps> {
    open: boolean;
    table: MRT_TableInstance<TData>;
}
declare const MRT_EditRowModal: <TData extends MRT_RowData>({ open, table, ...rest }: Props$b<TData>) => react_jsx_runtime.JSX.Element;

declare const parseCSSVarId: (id: string) => string;
declare const getMRTTheme: <TData extends MRT_RowData>(table: MRT_TableInstance<TData>, theme: Theme) => {
    baseBackgroundColor: string;
    draggingBorderColor: string;
    matchHighlightColor: string;
    pinnedRowBackgroundColor: string;
    selectedRowBackgroundColor: string;
};
declare const getCommonMRTCellStyles: <TData extends MRT_RowData>({ column, header, table, tableCellProps, theme, }: {
    column: MRT_Column<TData>;
    header?: MRT_Header<TData> | undefined;
    table: MRT_TableInstance<TData>;
    tableCellProps: TableCellProps;
    theme: Theme;
}) => any;
declare const getCommonToolbarStyles: <TData extends MRT_RowData>({ table, theme, }: {
    table: MRT_TableInstance<TData>;
    theme: Theme;
}) => {
    alignItems: string;
    backgroundColor: string;
    display: string;
    flexWrap: string;
    minHeight: string;
    overflow: string;
    position: string;
    transition: string;
    zIndex: number;
};

interface Props$a<TData extends MRT_RowData> extends TableProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_Table: <TData extends MRT_RowData>({ table, ...rest }: Props$a<TData>) => react_jsx_runtime.JSX.Element;

interface Props$9<TData extends MRT_RowData> extends TableContainerProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableContainer: <TData extends MRT_RowData>({ table, ...rest }: Props$9<TData>) => react_jsx_runtime.JSX.Element;

interface Props$8<TData extends MRT_RowData> extends CircularProgressProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_TableLoadingOverlay: <TData extends MRT_RowData>({ table, ...rest }: Props$8<TData>) => react_jsx_runtime.JSX.Element;

interface Props$7<TData extends MRT_RowData> extends PaperProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_TablePaper: <TData extends MRT_RowData>({ table, ...rest }: Props$7<TData>) => react_jsx_runtime.JSX.Element;

interface Props$6<TData extends MRT_RowData> extends BoxProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_BottomToolbar: <TData extends MRT_RowData>({ table, ...rest }: Props$6<TData>) => react_jsx_runtime.JSX.Element;

interface Props$5<TData extends MRT_RowData> extends LinearProgressProps {
    isTopToolbar: boolean;
    table: MRT_TableInstance<TData>;
}
declare const MRT_LinearProgressBar: <TData extends MRT_RowData>({ isTopToolbar, table, ...rest }: Props$5<TData>) => react_jsx_runtime.JSX.Element;

interface Props$4<TData extends MRT_RowData> extends Partial<PaginationProps & {
    rowsPerPageOptions?: {
        label: string;
        value: number;
    }[] | number[];
    showRowsPerPage?: boolean;
}> {
    position?: 'bottom' | 'top';
    table: MRT_TableInstance<TData>;
}
declare const MRT_TablePagination: <TData extends MRT_RowData>({ position, table, ...rest }: Props$4<TData>) => react_jsx_runtime.JSX.Element;

interface Props$3<TData extends MRT_RowData> extends AlertProps {
    stackAlertBanner?: boolean;
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToolbarAlertBanner: <TData extends MRT_RowData>({ stackAlertBanner, table, ...rest }: Props$3<TData>) => react_jsx_runtime.JSX.Element;

interface Props$2<TData extends MRT_RowData> extends BoxProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToolbarDropZone: <TData extends MRT_RowData>({ table, ...rest }: Props$2<TData>) => react_jsx_runtime.JSX.Element;

interface Props$1<TData extends MRT_RowData> extends BoxProps {
    table: MRT_TableInstance<TData>;
}
declare const MRT_ToolbarInternalButtons: <TData extends MRT_RowData>({ table, ...rest }: Props$1<TData>) => react_jsx_runtime.JSX.Element;

interface Props<TData extends MRT_RowData> {
    table: MRT_TableInstance<TData>;
}
declare const MRT_TopToolbar: <TData extends MRT_RowData>({ table, }: Props<TData>) => react_jsx_runtime.JSX.Element;

declare const useMaterialReactTable: <TData extends MRT_RowData>(tableOptions: MRT_TableOptions<TData>) => MRT_TableInstance<TData>;

export { type LiteralUnion, type MRT_AggregationFn, MRT_AggregationFns, type MRT_AggregationOption, MRT_BottomToolbar, type MRT_Cell, type MRT_Column, MRT_ColumnActionMenu, type MRT_ColumnDef, type MRT_ColumnFilterFnsState, type MRT_ColumnHelper, MRT_ColumnPinningButtons, MRT_CopyButton, MRT_DefaultColumn, MRT_DefaultDisplayColumn, type MRT_DefinedColumnDef, type MRT_DefinedTableOptions, type MRT_DensityState, type MRT_DisplayColumnDef, type MRT_DisplayColumnIds, MRT_EditActionButtons, MRT_EditCellTextField, MRT_EditRowModal, MRT_ExpandAllButton, MRT_ExpandButton, MRT_FilterCheckbox, type MRT_FilterFn, MRT_FilterFns, type MRT_FilterOption, MRT_FilterOptionMenu, MRT_FilterRangeFields, MRT_FilterRangeSlider, MRT_FilterTextField, MRT_GlobalFilterTextField, MRT_GrabHandleButton, type MRT_GroupColumnDef, type MRT_Header, type MRT_HeaderGroup, type MRT_Icons, type MRT_InternalFilterOption, MRT_LinearProgressBar, type MRT_Localization, type MRT_Row, MRT_RowActionMenu, type MRT_RowData, type MRT_RowModel, MRT_RowPinButton, MRT_SelectCheckbox, MRT_ShowHideColumnsButton, MRT_ShowHideColumnsMenu, MRT_ShowHideColumnsMenuItems, type MRT_SortingFn, MRT_SortingFns, type MRT_SortingOption, MRT_Table, MRT_TableBody, MRT_TableBodyCell, MRT_TableBodyCellValue, MRT_TableBodyRow, MRT_TableBodyRowGrabHandle, MRT_TableBodyRowPinButton, MRT_TableContainer, MRT_TableDetailPanel, MRT_TableFooter, MRT_TableFooterCell, MRT_TableFooterRow, MRT_TableHead, MRT_TableHeadCell, MRT_TableHeadCellColumnActionsButton, MRT_TableHeadCellFilterContainer, MRT_TableHeadCellFilterLabel, MRT_TableHeadCellGrabHandle, MRT_TableHeadCellResizeHandle, MRT_TableHeadCellSortLabel, MRT_TableHeadRow, type MRT_TableInstance, MRT_TableLoadingOverlay, type MRT_TableOptions, MRT_TablePagination, MRT_TablePaper, type MRT_TableState, type MRT_Theme, MRT_ToggleDensePaddingButton, MRT_ToggleFiltersButton, MRT_ToggleFullScreenButton, MRT_ToggleGlobalFilterButton, MRT_ToggleRowActionMenuButton, MRT_ToolbarAlertBanner, MRT_ToolbarDropZone, MRT_ToolbarInternalButtons, MRT_TopToolbar, MaterialReactTable, Memo_MRT_TableBody, Memo_MRT_TableBodyCell, Memo_MRT_TableBodyRow, type Prettify, type Xor, commonListItemStyles, commonMenuItemStyles, createMRTColumnHelper, createRow, extraIndexRangeExtractor, flexRender, getAllLeafColumnDefs, getCanRankRows, getColumnId, getCommonMRTCellStyles, getCommonToolbarStyles, getDefaultColumnFilterFn, getDefaultColumnOrderIds, getIsFirstColumn, getIsFirstRightPinnedColumn, getIsLastColumn, getIsLastLeftPinnedColumn, getLeadingDisplayColumnIds, getMRTTheme, getTotalRight, getTrailingDisplayColumnIds, getValueAndLabel, mrtFilterOptions, parseCSSVarId, parseFromValuesOrFunc, prepareColumns, rankGlobalFuzzy, reorderColumn, showExpandColumn, useMRT_DisplayColumns, useMRT_Effects, useMRT_TableInstance, useMRT_TableOptions, useMaterialReactTable };
